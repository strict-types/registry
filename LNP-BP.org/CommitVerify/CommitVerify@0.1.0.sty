{-
  Id: expand_vertigo_billy_HmAmKqZJ7XKDsyamyaikTq3PXzWgWcuVMXwe13Hzxfq4
  Name: CommitVerify
  Version: 0.1.0
  Description: Client-side-validation deterministic commitments
  Author: Dr Maxim Orlovsky <orlovsky@lnp-bp.org>
  Copyright (C) 2023 LNP/BP Standards Association. All rights reserved.
  License: Apache-2.0
-}

typelib CommitVerify -- expand_vertigo_billy_HmAmKqZJ7XKDsyamyaikTq3PXzWgWcuVMXwe13Hzxfq4

import quota_conan_fashion_3TZmAPf8EkQZnbGS1g8uMGes6jEWPqNkFB6pLUKeoefg as Std


data MerkleBlock      :: depth Std.U4
                       , crossSection [TreeNode]
                       , entropy U64?
data MerkleNode       :: [Byte ^ 32]
data MerkleProof      :: pos U16, path [MerkleNode]
data MerkleTree       :: depth Std.U4
                       , entropy U64
                       , messages {[Byte ^ 32] -> Message}
                       , map {U16 -> ProtocolId, Message}
data Message          :: [Byte ^ 32]
data ProtocolId       :: [Byte ^ 32]
data TreeNode         :: concealedNode (depth Std.U4, hash MerkleNode)
                       | commitmentLeaf (protocolId ProtocolId, message Message)

